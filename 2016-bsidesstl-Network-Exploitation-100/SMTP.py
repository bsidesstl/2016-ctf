#!/usr/bin/python
'''
This is a challenge for BSidesSTL 2016 about network exploitation.
The user is told to spoof an email from admin@SuperSecure.com,
to lopi@BSidesSTL.org.

In case you haven't noticed, this isn't really an SMTP server,
Just a python server pretending to be such a thing.  It somewhat
responds like a real SMTP server, though.  Kind of.

Flag: {STL-<C4nH4zSp00fz>}

--Written from template by @Doc_Hak
--Template from http://www.binarytides.com/python-socket-server-code-example/
'''

import socket
import sys
import time
from thread import *

HOST = ''   # Symbolic name meaning all available interfaces
PORT = 25 # Arbitrary non-privileged port

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'

#Bind socket to local host and port
try:
	s.bind((HOST, PORT))
except socket.error as msg:
	print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
	sys.exit()
print 'Socket bind complete'
 
#Start listening on socket
s.listen(10)
print 'Socket now listening'

#Function for handling connections. This will be used to create threads
def clientthread(conn):
	#Generate timestamp, send message to connected client
	timeStamp = time.strftime('%d %b %Y %H:%M:%S')
	conn.send('220 BSidesCTF ESMTP %s\n' %timeStamp) #send only takes string
	greetings = '250-BSidesCTF Hello %s, pleased to meet you\n' %addr[0]
	options = '250-ENHANCEDSTATUSCODES\n250-PIPELINING\n250-8BITMIME\n250-SIZE\n250-DSN\n250-STARTTLS\n250-DELIVERBY\n250 HELP\n'
	#infinite loop so that function do not terminate and thread do not end.
	while True:
		#Receiving from client
		data = conn.recv(1024)
		reply = '' #Set empty variable
		if any(c in data for c in ('EHLO', 'HELO', 'ehlo', 'helo')): #Test for ehlo
			conn.sendall(greetings) #greetz user
			conn.sendall(options) #None of these do anything...
			data = conn.recv(1024) #Get user input
			if any(c in data for c in ('ENHANCEDSTATUSCODES', 'PIPELINING','8BITMIME','SIZE','DSN','STARTTLS','DELIVERBY','HELP')):	
				conn.sendall('Not Implemented\n') #Lol, smoke and mirrors
			elif ('mail from:admin@SuperSecure.com') in data: #If user gave us this...
				conn.sendall('250 %s... Sender ok\n'%data.strip('\n')) #Send that
				data = conn.recv(1024) #Get user input
				if ('rcpt to:lopi@BSidesSTL.org') in data: #If user gave us this
					conn.sendall('{STL-<C4nH4zSp00fz>}\n')	#Give the flag
					break #Go home
				else: #after mail from: if they typed in something else
					conn.sendall('500 Command unrecognized: %s\nRestarting Session...\n' %data)			
			else: #After ehlo if they typed in anything else
				conn.sendall('500 Command unrecognized: %s\nRestarting Session...\n' %data)
		if not data: 
			break

		conn.sendall(reply)

	#came out of loop
	conn.close()

#now keep talking with the client
try:
	while 1:
		#wait to accept a connection - blocking call
		conn, addr = s.accept()
		print 'Connected with ' + addr[0] + ':' + str(addr[1])

		#start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.
		start_new_thread(clientthread ,(conn,))
finally:
	s.close()
