'''
This is a Network Exploitation challenge worth 200 points
for BSidesSTL 2016.
The user is told that the network admin has locked down the FTP server
and has restricted user function to read only.  Can you find a way 
this might still be a problem?

In case you haven't noticed, this isn't really an FTP server,
Just a python server pretending to be such a thing.  It somewhat
responds like a real FTP server, though.  Kind of.

Flag: {STL-<R34d0nly1z!s3cure>}

--Written from template by @Doc_Hak
--Template from http://www.binarytides.com/python-socket-server-code-example/
'''



import socket
import sys
import time
from thread import *

HOST = ''   # Symbolic name meaning all available interfaces
PORT = 21 # Priveleged port, if want non-privileged port set to > 1024

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'

#Bind socket to local host and port
try:
	s.bind((HOST, PORT))
except socket.error as msg:
	print 'Bind failed. Error Code : %s Message %s' %(str(msg[0]),msg[1])
	sys.exit()
print 'Socket bind complete'
 
#Start listening on socket
s.listen(10)
print 'Socket now listening'

#Function for handling connections. This will be used to create threads
def clientthread(conn):
	#Generate timestamp, send message to connected client
	greetings1 = 'Connected to ftp.BSidesCTF'
	greetings2 = '220' + '-'*15 + '\n'
	greetings3 = '220- Unauthorized access and/or misuse of this FTP server is strictly\n'
	greetings4 = '220- prohibited. All connections and activity to this server are logged,\n'
	greetings5 = '220- monitored, and subject to public inspection.\n'
	loginPrompt = 'Name (CTF.BSidesSTL.org:CTF): '
	passwordPrompt = '331 Please specify the password.\n'
	loginSuccess = '230 Login successful.\nRemote system type is UNIX\nUsing binary mode to transfer files\n'
	conn.send('%s%s%s%s%s' %(greetings1,greetings2,greetings3,greetings4,greetings5))
	loginTrue = False
	#infinite loop for login so that function do not terminate and thread do not end.
	while not (loginTrue):
		#Receiving from client
		conn.send('%s' %loginPrompt)
		data = conn.recv(1024)
		if 'anonymous' in data: #Test for any anonymous login
			conn.sendall(passwordPrompt) #ask for password
			#conn.sendall(options) #None of these do anything...
			data = conn.recv(1024) #Get user input
			#if any(c in data for c in ('ENHANCEDSTATUSCODES', 'PIPELINING','8BITMIME','SIZE','DSN','STARTTLS','DELIVERBY','HELP')):	
			if (data): #If they sent anything at all			
				conn.sendall('%s' %loginSuccess) #Send login success message
				loginTrue = True
			else: #After ehlo if they typed in anything else
				conn.sendall('500 Command unrecognized: %s\nRestarting Session...\n' %data)
		else: #They did not try to log in anonymously
			conn.sendall('Unknown username.\n')
			#conn.close()
			#break		
		if not data: 
			break
	
	directory = 0 #Home directory 1 = ftp, 2 = www, 3 = secret, 4 = hidden		
	while (True): #Infinite loop for searching for the flag location
		prompt = 'ftp>'
		options = '?  help  pwd  ls  cd\n'
		homeDir = '/home/CTF/\n'
		homeDirLS = 'dr--r--r-- 2 CTF CTF 4096 Sep  2 06:49 ftp\ndr--r--r-- 3 CTF CTF 4096 Sep  2 06:50 www\n'
		changeDir = '250 Directory successfully changed.\n'	
		cannotChangeDir = 'Unknown Directory\n'	
		ftpDir = '/home/CTF/ftp\n'
		ftpDirLS = '-rw-r--r-- 1 CTF CTF    46 Sep  2 06:49 readme.txt\n'
		wwwDir = '/home/CTF/www/\n'	
		wwwDirLS = 'dr--r--r-- 3 CTF CTF 4096 Sep  2 06:50 secret\n'
		secretDir = '/home/CTF/www/secret/\n'
		secretDirLS = 'dr--r--r-- 2 CTF CTF 4096 Sep  2 06:51 hidden\n'
		hiddenDir = '/home/CTF/www/secret/hidden\n'
		hiddenDirLS = '-r--r--r-- 1 CTF CTF   26 Sep  2 07:05 SecretHiddenFlag.txt\n'
		conn.sendall('%s' %prompt) # send prompt
		data = conn.recv(1024) #Get user input
		if any(c in data for c in ('?', 'help')): #If user entered ? or help
			conn.sendall('%s' %options)
		elif 'pwd' in data: #Test for current directory, print location
			if directory == 0: conn.sendall('%s' %homeDir) 
			elif directory == 1: conn.sendall('%s' %ftpDir)
			elif directory == 2: conn.sendall('%s' %wwwDir)
			elif directory == 3: conn.sendall('%s' %secretDir)
			elif directory == 4: conn.sendall('%s' %hiddenDir)
		elif 'ls' in data: #User list files, test dir, list files
			if directory == 0: conn.sendall('%s' %homeDirLS)
			elif directory == 1: conn.sendall('%s' %ftpDirLS)
			elif directory == 2: conn.sendall('%s' %wwwDirLS)
			elif directory == 3: conn.sendall('%s' %secretDirLS)
			elif directory == 4: conn.sendall('%s' %hiddenDirLS)
		elif 'cd' in data: #User chaning directory, test dir, change directory, send acknowledgement
			if '..' in data:
				if directory == 0: continue
				if directory == 1: directory = 0; conn.sendall('%s' %changeDir)
				if directory == 2: directory = 0; conn.sendall('%s' %changeDir)
				if directory == 3: directory = 2; conn.sendall('%s' %changeDir)
				if directory == 4: directory = 3; conn.sendall('%s' %changeDir)
			elif 'ftp' in data: 
				if directory == 0: directory = 1; conn.sendall('%s' %changeDir)
				else: conn.sendall('%s' %cannotChangeDir)
			elif 'www' in data:
				if directory == 0: directory = 2; conn.sendall('%s' %changeDir)
				else: conn.sendall('%s' %cannotChangeDir)
			elif 'secret' in data:
				if directory == 2: directory = 3; conn.sendall('%s' %changeDir)
				else: conn.sendall('%s' %cannotChangeDir)
			elif 'hidden' in data:
				if directory == 3: directory = 4; conn.sendall('%s' %changeDir)
				else: conn.sendall('%s' %cannotChangeDir)
			else: conn.sendall('%s' %cannotChangeDir)
		elif not data:
			break
	#came out of loop
	conn.close() #kbai

#now keep talking with the client
try:
	while 1:
		#wait to accept a connection - blocking call
		conn, addr = s.accept()
		print 'Connected with %s:%s' %(addr[0], str(addr[1]))

		#start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.
		start_new_thread(clientthread ,(conn,))
finally:
	s.close() #This makes sure program doesn't keep blocking port after ctrl+c.  
#Note, if ctrl+c is given with a client connected it'll still block the port for ~10 seconds.



